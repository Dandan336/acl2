; C Library
;
; Copyright (C) 2020 Kestrel Institute (http://www.kestrel.edu)
;
; License: A 3-clause BSD license. See the LICENSE file distributed with ACL2.
;
; Author: Alessandro Coglio (coglio@kestrel.edu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "C")

(include-book "dynamic-semantics")

(include-book "kestrel/utilities/defopeners" :dir :system)
(include-book "tools/rulesets" :dir :system)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defxdoc+ atc-proof-support-alternative
  :parents (atc-implementation)
  :short "Alternative rules to support the proofs generated by ATC."
  :long
  (xdoc::topstring
   (xdoc::p
    "These are an alternative to the rules in @(see atc-proof-support).
     These use a different opener utility,
     namely the one in @('[books]/kestrel/utilities/defopeners').")
   (xdoc::p
    "As conveyed by the plural (vs. the singular @(tsee defopener)),
     @('defopeners') generates multiple opener rules,
     corresponding to the conditional structure of the function.
     In general, there will be some base cases and some step cases;
     the former have @('base') in the generated rule names,
     while the latter have @('unroll') in the generated rule names.
     The names of the generated rules can be see below,
     in the forms that add such rules to the ruleset.")
   (xdoc::p
    "These opener rules are motivated by the same proof strategy
     described in @(see atc-proof-support):
     see that page for details.
     The difference here is that we generate openers
     for all the cases of the execution functions
     @(tsee exec-expr),
     @(tsee exec-expr-list),
     @(tsee exec-stmt), and
     @(tsee exec-block-item-list),
     not just some as in @(see atc-proof-support).
     After all, @('defopeners') automatically creates rules for all cases.")
   (xdoc::p
    "We collect all the opener rules in a ruleset,
     so that we can more concisely enable them in the generated proofs.
     The opener rules are all disabled by default."))
  :order-subtopics t
  :default-parent t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def-ruleset exec-unfold-rules nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defopeners exec-expr
  :hyps ((syntaxp (quotep e)))
  :disable t)

(add-to-ruleset exec-unfold-rules
                '(exec-expr-base-1
                  exec-expr-base-2
                  exec-expr-base-3
                  exec-expr-base-4
                  exec-expr-base-5
                  exec-expr-base-6
                  exec-expr-base-7
                  exec-expr-base-8
                  exec-expr-base-9
                  exec-expr-unroll-1
                  exec-expr-unroll-2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defopeners exec-expr-list
  :hyps ((syntaxp (quotep es)))
  :disable t)

(add-to-ruleset exec-unfold-rules
                '(exec-expr-list-base-1
                  exec-expr-list-base-2
                  exec-expr-list-base-3
                  exec-expr-list-unroll))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defopeners exec-stmt
  :hyps ((syntaxp (quotep s)))
  :disable t)

(add-to-ruleset exec-unfold-rules
                '(exec-stmt-base-1
                  exec-stmt-base-2
                  exec-stmt-base-3
                  exec-stmt-base-4
                  exec-stmt-base-5
                  exec-stmt-base-6
                  exec-stmt-base-7
                  exec-stmt-base-8
                  exec-stmt-base-9
                  exec-stmt-unroll-1
                  exec-stmt-unroll-2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defopeners exec-block-item-list
  :hyps ((syntaxp (quotep items)))
  :disable t)

(add-to-ruleset exec-unfold-rules
                '(exec-block-item-list-base-1
                  exec-block-item-list-base-2
                  exec-block-item-list-base-3
                  exec-block-item-list-base-4
                  exec-block-item-list-unroll))
