; Java Library
;
; Copyright (C) 2020 Kestrel Institute (http://www.kestrel.edu)
;
; License: A 3-clause BSD license. See the LICENSE file distributed with ACL2.
;
; Author: Alessandro Coglio (coglio@kestrel.edu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "JAVA")

(include-book "../language/primitive-values")

(include-book "types")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defxdoc+ atj-test-structures
  :parents (atj-implementation)
  :short "Structures that store user-specified ATJ tests."
  :order-subtopics t
  :default-parent t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fty::deftagsum atj-test-value
  :short "Values used for inputs and outputs in user-specified ATJ tests."
  :long
  (xdoc::topstring
   (xdoc::p
    "The Java methods generated by ATJ manipulate three kinds of values:")
   (xdoc::ol
    (xdoc::li
     "Objects of the AIJ classes that represent ACL2 values,
      e.g. @('Acl2Integer').
      These correspond to the ATJ "
     (xdoc::seetopic "atj-types" "types")
     " whose names start with @('a'), e.g. @(':ainteger').")
    (xdoc::li
     "Java primitive values,
      which correspond to the ATJ @(':j...') types not ending in @('[]').
      These values are used only in the shallow embedding with guards.")
    (xdoc::li
     "Java primitive arrays,
      which correspond to the ATJ @(':j...[]') types.
      These arrays are only used in the shallow embedding with guards."))
   (xdoc::p
    "Thus, when generating tests for the generated Java methods,
     the input and output values of the tests may be
     of these three different kinds.
     So we introduce a type for these three kinds of values,
     with each of the last two kinds having six sub-kinds each.
     The @('a') values may be anything,
     while the @('j') values are restricted to (our model of)
     Java primitive values and Java primitive arrays."))
  (:avalue ((get acl2::any)))
  (:jvalue-boolean ((get boolean-value)))
  (:jvalue-char ((get char-value)))
  (:jvalue-byte ((get byte-value)))
  (:jvalue-short ((get short-value)))
  (:jvalue-int ((get int-value)))
  (:jvalue-long ((get long-value)))
  (:jvalue-boolean-array ((get boolean-array)))
  (:jvalue-char-array ((get char-array)))
  (:jvalue-byte-array ((get byte-array)))
  (:jvalue-short-array ((get short-array)))
  (:jvalue-int-array ((get int-array)))
  (:jvalue-long-array ((get long-array))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-test-value-to-type ((test-value atj-test-value-p))
  :returns (type atj-typep)
  :short "ATJ type of an ATJ test value."
  (atj-test-value-case test-value
                       :avalue (atj-type-of-value test-value.get)
                       :jvalue-boolean :jboolean
                       :jvalue-char :jchar
                       :jvalue-byte :jbyte
                       :jvalue-short :jshort
                       :jvalue-int :jint
                       :jvalue-long :jlong
                       :jvalue-boolean-array :jboolean[]
                       :jvalue-char-array :jchar[]
                       :jvalue-byte-array :jbyte[]
                       :jvalue-short-array :jshort[]
                       :jvalue-int-array :jint[]
                       :jvalue-long-array :jlong[]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fty::deflist atj-test-value-list
  :short "True lists of ATJ test values."
  :elt-type atj-test-value
  :true-listp t
  :elementp-of-nil nil
  :pred atj-test-value-listp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-test-value-list-to-test-value ((tvalues atj-test-value-listp))
  :returns (tvalue atj-test-value-p :hyp :guard)
  :short "Turn a singleton list of ATJ test values
          into a single ATJ test value."
  :long
  (xdoc::topstring
   (xdoc::p
    "An error occurs unless the input list is a singleton.
     This function is used when the list is expected to be a singleton."))
  (if (= (len tvalues) 1)
      (car tvalues)
    (prog2$ (raise "Internal error: ~x0 is not a singleton list." tvalues)
            (atj-test-value-avalue nil)))) ; irrelevant

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-test-values-to-types ((test-values atj-test-value-listp))
  :returns (types atj-type-listp)
  :short "Lift @(tsee atj-test-value-to-type) to lists."
  (cond ((endp test-values) nil)
        (t (cons (atj-test-value-to-type (car test-values))
                 (atj-test-values-to-types (cdr test-values)))))
  ///

  (defret len-of-atj-test-values-to-types
    (equal (len types) (len test-values))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fty::defprod atj-test
  :short "Processed user-specified ATJ tests."
  :long
  (xdoc::topstring
   (xdoc::p
    "Each test specified by the @(':tests') input
     must have the form @('(namej termj)'),
     where @('termj') must translate to @('(fn in1 in2 ...)'),
     as explained in the documentation.
     As the @(':tests') input is processed,
     the information about each test is stored
     into an aggregate of this type.
     This aggregate stores
     @('namej'),
     @('fn'),
     the list of inputs derived from @('in1'), @('in2'), etc.,
     and results of the ground call @('(fn in1 in2 ...)').
     The latter list is a singleton for single-valued functions,
     while it consists of two or more values for multi-valued functions."))
  ((name string)
   (function symbol)
   (inputs atj-test-value-list)
   (outputs atj-test-value-list))
  :pred atj-testp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fty::deflist atj-test-list
  :short "True lists of processed user-specified ATJ tests."
  :elt-type atj-test
  :true-listp t
  :elementp-of-nil nil
  :pred atj-test-listp)
