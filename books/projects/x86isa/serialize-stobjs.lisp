(in-package "ACL2")
(include-book "std/util/bstar" :dir :system)

;; Note: This is a hack by Matt Kaufmann to allow updating abstract stobjs
;; with the functions for concrete stobjs. It is unsafe.
(include-book "translate-hack-for-yahya-1")

(defstobj teststobj
          fld
          (reg :type (array (unsigned-byte 31) (8))
               :initially 0))

(defun get-type-child-stobj (typ state)
  (declare (xargs :stobjs (state)
                  :mode :program))
  (cond ((and (symbolp typ)
              (acl2::stobjp typ t (w state))) typ)
        ((and (consp typ)
              (equal (car typ) 'array))
         (get-type-child-stobj (cadr typ) state))
        (t nil)))

(defun get-stobj-field-value (field-template stobj)
  (declare (xargs :mode :program))
  (b* ((accessor-name (acl2::access acl2::defstobj-field-template field-template :accessor-name)))
      `(,(acl2::packn (list stobj '- accessor-name '-to-obj)) ,stobj)))

(defun build-stobj-obj (field-templates stobj)
  (declare (xargs :mode :program))
  (if (equal field-templates nil)
    nil
    (b* (((list* field-template tail) field-templates))
        `(acons ',(acl2::access acl2::defstobj-field-template field-template :accessor-name)
               ,(get-stobj-field-value field-template stobj)
               ,(build-stobj-obj tail stobj)))))

(defun build-obj-stobj (field-templates stobj)
  (declare (xargs :mode :program))
  (if (equal field-templates nil)
    stobj
    (b* (((list* field-template tail) field-templates)
         (accessor-name (acl2::access acl2::defstobj-field-template field-template :accessor-name)))
        `(b* ((,stobj (,(acl2::packn (list stobj '-obj-to- accessor-name)) (cdr (assoc ',accessor-name obj))
                                                                           ,stobj)))
             ,(build-obj-stobj tail stobj)))))

(defun get-absstobj-foundation (stobj state)
  (declare (xargs :stobjs (state)
                  :mode :program))
  (car (getpropc stobj 'absstobj-info nil (w state))))

(defun get-concrete-stobj (stobj state)
  (declare (xargs :stobjs (state)
                  :mode :program))
  (b* ((def-event (acl2::get-event stobj (w state)))
       ((when (equal (car def-event)
                     'defstobj)) stobj))
      (get-concrete-stobj (get-absstobj-foundation stobj state) state)))

(defun get-stobj-field-templates (stobj state)
  (declare (xargs :stobjs (state)
                  :mode :program))
  (b* ((def-event (acl2::get-event stobj (w state)))
       ((when (equal 'defabsstobj (car def-event))) (get-stobj-field-templates (get-absstobj-foundation stobj state) state))
       ((list* & & def-args) def-event)
       (template (acl2::defstobj-template stobj def-args (w state)))
       (field-templates (acl2::access acl2::defstobj-template template :field-templates)))
      field-templates))

(defun generate-stobj-fields-to-objs1 (templates stobj state)
  (declare (xargs :stobjs (state)
                  :mode :program))
  (b* (((unless templates) nil)
       ((cons template tail) templates)
       (template-type (acl2::access acl2::defstobj-field-template template :type))
       (accessor-name (acl2::access acl2::defstobj-field-template template :accessor-name))
       (length-name (acl2::access acl2::defstobj-field-template template :length-name))
       (def-name (acl2::packn (list stobj '- accessor-name '-to-obj)))
       (helper-name (acl2::packn (list def-name '1)))
       (access-el-name (acl2::packn (list stobj '- accessor-name '-el-to-obj)))
       (arr? (and (consp template-type)
                  (equal (car template-type)
                         'array)))
       (child-stobj (get-type-child-stobj template-type state)))
      (append (if arr? 
                `((defun ,access-el-name (idx ,stobj)
                    (declare (xargs :stobjs (,stobj)
                                    :mode :program))
                    ,(if child-stobj 
                       `(stobj-let ((,child-stobj (,accessor-name idx ,stobj)))
                                   (el-obj)
                                   (,(acl2::packn (list child-stobj '-to-obj)) ,child-stobj)
                                   el-obj)
                       `(,accessor-name idx ,stobj)))
                  (defun ,helper-name (idx ,stobj acc)
                    (declare (xargs :stobjs (,stobj)
                                    :mode :program))
                    (if (equal (,length-name ,stobj) idx)
                      acc
                      (,helper-name (1+ idx)
                                    ,stobj 
                                    (cons (,access-el-name idx ,stobj) 
                                          acc)))))
                nil)
              (cons `(defun ,def-name (,stobj)
                       (declare (xargs :stobjs (,stobj)
                                       :mode :program))
                       ,(cond (arr? `(reverse (,helper-name 0 ,stobj nil))) 
                              (child-stobj `(stobj-let ((,child-stobj (,accessor-name ,stobj)))
                                                       (obj)
                                                       (,(acl2::packn (list child-stobj '-to-obj)) ,child-stobj)
                                                       obj))
                              (t `(,accessor-name ,stobj))))
                    (generate-stobj-fields-to-objs1 tail stobj state)))))

(defun generate-stobj-fields-to-objs (stobj state)
  (declare (xargs :stobjs (state)
                  :mode :program))
  (b* ((templates (get-stobj-field-templates stobj state)))
      (generate-stobj-fields-to-objs1 templates stobj state)))

(defun generate-objs-to-stobj-fields1 (templates stobj state)
  (declare (xargs :stobjs (state)
                  :mode :program))
  (b* (((unless templates) nil)
       ((cons template tail) templates)
       (template-type (acl2::access acl2::defstobj-field-template template :type))
       (accessor-name (acl2::access acl2::defstobj-field-template template :accessor-name))
       (updater-name (acl2::access acl2::defstobj-field-template template :updater-name))
       (length-name (acl2::access acl2::defstobj-field-template template :length-name))
       (def-name (acl2::packn (list stobj '-obj-to- accessor-name)))
       (helper-name (acl2::packn (list def-name '1)))
       (update-el-name (acl2::packn (list stobj '-obj-to- accessor-name '-el)))
       (arr? (and (consp template-type)
                  (equal (car template-type)
                         'array)))
       (child-stobj (get-type-child-stobj template-type state))
       (child-concrete (and child-stobj
                            (get-concrete-stobj child-stobj state))))
      (append (if arr? 
                `((defun ,update-el-name (idx obj ,stobj)
                    (declare (xargs :stobjs (,stobj)
                                    :mode :program))
                    ,(if child-stobj 
                       `(stobj-let ((,child-concrete (,accessor-name idx ,stobj)))
                                   (,child-concrete)
                                   (,(acl2::packn-pos (list 'obj-to- child-concrete) child-concrete) obj ,child-concrete)
                                   ,stobj)
                       `(,updater-name idx obj ,stobj)))
                  (defun ,helper-name (idx obj ,stobj)
                    (declare (xargs :stobjs (,stobj)
                                    :mode :program))
                    (if (equal (,length-name ,stobj) idx)
                      ,stobj
                      (b* ((,stobj (,update-el-name idx (car obj) ,stobj)))
                          (,helper-name (1+ idx)
                                        (cdr obj)
                                        ,stobj)))))
                nil)
              (cons `(defun ,def-name (obj ,stobj)
                       (declare (xargs :stobjs (,stobj)
                                       :mode :program))
                       ,(cond (arr? `(,helper-name 0 obj ,stobj)) 
                              (child-stobj `(stobj-let ((,child-stobj (,accessor-name ,stobj)))
                                                       (,child-stobj)
                                                       (,(acl2::packn-pos (list 'obj-to- child-stobj) child-stobj) obj ,child-stobj)
                                                       ,stobj))
                              (t `(,updater-name obj ,stobj))))
                    (generate-objs-to-stobj-fields1 tail stobj state)))))

(defun generate-objs-to-stobj-fields (stobj state)
  (declare (xargs :stobjs (state)
                  :mode :program))
  (b* ((templates (get-stobj-field-templates stobj state)))
      (generate-objs-to-stobj-fields1 templates stobj state)))

(defmacro generate-stobj-to-obj (stobj)
  `(make-event (b* ((stobj-to-obj-name (acl2::packn (list ,stobj '-to-obj)))
                    (obj-to-stobj-name (acl2::packn-pos (list 'obj-to- ,stobj) ,stobj))
                    (def-event (acl2::get-event ,stobj (w state)))
                    ((when (equal (car def-event)
                                  'defabsstobj)) (b* ((foundation (get-absstobj-foundation ,stobj state)))
                                                     `(progn (generate-stobj-to-obj ',foundation)
                                                             (defun ,stobj-to-obj-name (,,stobj)
                                                               (declare (xargs :stobjs (,,stobj)
                                                                               :mode :program))
                                                               (,(acl2::packn (list foundation '-to-obj)) ,,stobj))
                                                             (defun ,obj-to-stobj-name (obj ,,stobj)
                                                               (declare (xargs :stobjs (,,stobj)
                                                                               :mode :program))
                                                               ;; This b* is necessary for the translate hack to allow us to return
                                                               ;; the value. Otherwise you get an error that we're returning a stobj$c
                                                               ;; instead of a stobj
                                                               (,(acl2::packn-pos (list 'obj-to- foundation) foundation) obj ,,stobj))))))
                   `(progn
                      ,@(generate-stobj-fields-to-objs ,stobj state)
                      ,@(generate-objs-to-stobj-fields ,stobj state)
                      (defun ,stobj-to-obj-name (,,stobj)
                        (declare (xargs :stobjs (,,stobj)
                                        :mode :program))
                        ,(b* ((field-templates (get-stobj-field-templates ,stobj state)))
                             (build-stobj-obj field-templates ,stobj)))
                      (defun ,obj-to-stobj-name (obj ,,stobj)
                        (declare (xargs :stobjs (,,stobj)
                                        :mode :program))
                        ,(b* ((field-templates (get-stobj-field-templates ,stobj state)))
                             (build-obj-stobj field-templates ,stobj)))))))

(generate-stobj-to-obj 'teststobj)
