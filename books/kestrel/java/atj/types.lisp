; Java Library
;
; Copyright (C) 2020 Kestrel Institute (http://www.kestrel.edu)
;
; License: A 3-clause BSD license. See the LICENSE file distributed with ACL2.
;
; Author: Alessandro Coglio (coglio@kestrel.edu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "JAVA")

(include-book "java-primitive-array-model")
(include-book "java-types")

(include-book "kestrel/std/system/arity-plus" :dir :system)
(include-book "kestrel/std/system/function-namep" :dir :system)
(include-book "kestrel/std/system/number-of-results-plus" :dir :system)
(include-book "kestrel/std/system/table-alist-plus" :dir :system)
(include-book "kestrel/utilities/xdoc/defxdoc-plus" :dir :system)
(include-book "std/typed-lists/cons-listp" :dir :system)
(include-book "std/util/defaggregate" :dir :system)
(include-book "std/util/defenum" :dir :system)
(include-book "std/util/defval" :dir :system)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defxdoc+ atj-types
  :parents (atj-implementation)
  :short "Types used by ATJ for code generation."
  :long
  (xdoc::topstring
   (xdoc::p
    "In order to make the generated Java code more efficient and idiomatic,
     ATJ uses types that correspond to both ACL2 predicates and Java types.
     These ATJ types are used only when
     @(':deep') is @('nil') and @(':guards') is @('t').")
   (xdoc::p
    "For example, consider a unary ACL2 function
     whose guard is or implies @(tsee stringp),
     and the corresponding Java method generated by ATJ.
     Since under the assumption of guard satisfaction
     this method will always be called
     with an @('Acl2Value') that is an @('Acl2String'),
     the method can use @('Acl2String') instead of @('Acl2Value')
     as the type of the argument.
     Furthermore, suppose that, under the guard,
     the ACL2 function always returns @(tsee integerp).
     Then the Java method can use @('Acl2Integer') instead of @('Acl2Value')
     as the return type.
     In other words,
     narrower types than the one for all ACL2 values (i.e. @('Acl2Value'))
     can be used for the argument and result of this Java method.
     This narrowing is also used to generate methods
     that operate on Java primitive values and primitive arrays.")
   (xdoc::p
    "In general, establishing the narrower input and output types
     for a Java method generated from an ACL2 function
     may involve arbitrarily hard theorem proving:
     (i) proving that the guard implies that the inputs of the ACL2 function
     satisfy the ACL2 predicates corresponding to the input types, and
     (ii) proving that the guard implies that the outputs of the ACL2 function
     satisfy the ACL2 predicates corresponding to the output types;
     the number of outputs of an ACL2 function is greater than 1
     if the function returns an @(tsee mv) value;
     otherwise the number of outputs is 1.
     Since we do not want ATJ to attempt any theorem proving,
     we provide a macro @(tsee def-atj-main-function-type)
     to perform those theorem proving tasks under user control
     and to record the input and output types of ACL2 functions in a table,
     and we have ATJ make use of this table.
     Note that these types are different from
     ACL2's built-in types used for typeset reasoning,
     ACL2's tau system types,
     and (our model of) Java types.")
   (xdoc::p
    "With a table of the types of the involved ACL2 functions at hand
     (the table being constructed
     via calls of @(tsee def-atj-main-function-type)),
     ATJ performs a type analysis of the ACL2 terms in function bodies
     before translating them to Java.
     Generally speaking,
     ATJ compares the type inferred for the actual argument of a function
     (this type is inferred by analyzing terms recursively)
     with the type of the corresponding formal argument of the function
     (this type is retrieved from the table of function types):
     if they differ, ATJ inserts code to convert from the former to the latter,
     unless the former is a subtype of the latter in Java.
     The conversion may be a type cast,
     e.g. to convert from @('Acl2Value') to @('Acl2String');
     the cast is guaranteed to succeed,
     assuming that the ACL2 guards are verified.
     The conversion may be a change in representation,
     e.g. to convert from @('int') to @('Acl2Value');
     here the conversion is based on
     the ACL2 representation of Java @('int') values,
     described " (xdoc::seetopic "atj-java-primitives" "here") ".")
   (xdoc::p
    "The ATJ type information stored in the table
     determines/specifies the input and output types of the Java methods
     generated for the corresponding ACL2 functions.
     In general, there may be different choices of types possible
     for certain ACL2 functions:
     different choices will lead to different Java code.
     For instance,
     if a function's guard implies that an argument satisfies @(tsee integerp),
     that function's argument can be assigned
     a type corresponding to @('Acl2Integer'),
     or a type corresponding to @('Acl2Rational').
     The types of these Java methods are part of the ``API''
     that the generated Java code provides to external Java code.")
   (xdoc::p
    "In some cases, ACL2 functions return outputs of narrower types
     when given inputs of narrower types.
     Prime examples are the arithmetic operations
     @(tsee binary-+), @(tsee binary-*), and @(tsee unary--).
     All of their input and output types are
     the type corresponding to @(tsee acl2-numberp),
     based on their guards:
     this can be recorded via @(tsee def-atj-main-function-type).
     Based on these types, the corresponding Java methods
     will take and return @('Acl2Number') values.
     Now, consider a unary function @('f') that takes integers
     (i.e. it has a recorded input type corresponding to @(tsee integerp)),
     and a term @('(f (binary-+ <i> <j>))'),
     where @('<i>') and @('<j>') are integer-valued terms.
     When this term is translated to Java,
     a cast (from @('Acl2Number')) to @('Acl2Integer') will be inserted
     around the call of the method corresponding to @(tsee binary-+),
     in order to fit the @('Acl2Integer') type of
     the argument of the method corresponding to @('f').")
   (xdoc::p
    "However, due to well-known closure properties,
     @(tsee binary-+), like @(tsee binary-+) and @(tsee unary--),
     maps @(tsee rationalp) inputs to @(tsee rationalp) outputs,
     and @(tsee integerp) inputs to @(tsee integerp) outputs.
     This means that we could generate three overloaded methods
     for each such ACL2 function:
     one with @('Acl2Number') argument and result types (as above),
     one with @('Acl2Rational') argument and result types, and
     one with @('Acl2Integer') argument and result types.
     This will make the cast in the example above unnecessary,
     because if the Java expressions that translate @('<i>') and @('<j>')
     statically have type @('Acl2Integer'),
     the Java compiler will pick the most specific overloaded method,
     which returns @('Acl2Integer').")
   (xdoc::p
    "This is not limited to primitive arithmetic operations.
     Any ACL2 function may have the property of
     returning outputs of narrower types when given inputs of narrower types.
     Even if the output types are not narrower,
     the internal computations may be more efficient on narrower inputs,
     e.g. the cast in the example above can be avoided
     when that call of @('f') is part of some function @('g')
     that may not even return numbers (e.g. it may return booleans).")
   (xdoc::p
    "Thus, we provide another macro, @(tsee def-atj-other-function-type),
     to record additional input and output types for ACL2 functions.
     ATJ makes use of these additional types
     to generate multiple overloaded methods for single ACL2 functions.
     In general, via these two macros, each ACL2 function may have
     more than one input/output type associated with it
     (where an input/output type is a full function type,
     consisting of zero or more input types and one or more output types):
     (i) a primary (`main') input/output type,
     provable from the guards as described above; and
     (ii) zero or more secondary (`other') input/output types.
     The secondary input types are narrower than the primary ones,
     but do not have to be provable just from the guard;
     what must be proved,
     via a theorem generated by @(tsee def-atj-other-function-type),
     is that the guard and the input types imply the output type.")
   (xdoc::p
    "The above is just an overview of the use of types by ATJ.
     More details are in the documentation of their implementation
     and of the code generation functions that use them."))
  :order-subtopics t
  :default-parent t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(std::defenum atj-typep
  (:ainteger
   :arational
   :anumber
   :acharacter
   :astring
   :asymbol
   :acons
   :avalue
   :jboolean
   :jchar
   :jbyte
   :jshort
   :jint
   :jlong
   :jboolean[]
   :jchar[]
   :jbyte[]
   :jshort[]
   :jint[]
   :jlong[])
  :short "Recognize ATJ types."
  :long
  (xdoc::topstring
   (xdoc::p
    "These are used for code generation, as explained "
    (xdoc::seetopic "atj-types" "here")
    ".")
   (xdoc::p
    "Currently ATJ uses types for
     all the AIJ public class types for ACL2 values
     (integers, rationals, numbers,
     characters, strings, symbols,
     @(tsee cons) pairs, and all values),
     whose names start with @('a') for `ACL2',
     as well as types for the Java primitive types
     except @('float') and @('double'),
     and types for Java primitive array types
     except @('float[]') and @('double[]').
     More types may be added in the future.")
   (xdoc::p
    "Each ATJ type denotes
     (i) an ACL2 predicate (see @(tsee atj-type-to-pred)) and
     (ii) a Java type (see @(tsee atj-type-to-jitype)).
     The initial @('a') and @('j') in their names
     does not mean that they denote either ACL2 types or Java types,
     but just that the ones starting with @('a') denote ACL2 built-in types
     while the ones starting with @('j') denote Java built-in types.")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(std::deflist atj-type-listp (x)
  :short "Recognize true lists of ATJ types."
  (atj-typep x)
  :true-listp t
  :elementp-of-nil nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(std::deflist atj-type-list-listp (x)
  :short "Recognize true lists of true lists of ATJ types."
  (atj-type-listp x)
  :true-listp t
  :elementp-of-nil t
  ///

  (defrule atj-type-list-listp-of-remove-duplicates-equal
    (implies (atj-type-list-listp x)
             (atj-type-list-listp (remove-duplicates-equal x)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(std::defalist atj-symbol-type-alistp (x)
  :short "Recognize alists from symbols to ATJ types."
  :key (symbolp x)
  :val (atj-typep x)
  :true-listp t
  :keyp-of-nil t
  :valp-of-nil nil
  ///

  (defrule atj-typep-of-cdr-of-assoc-equal-when-atj-symbol-type-alistp
    (implies (atj-symbol-type-alistp alist)
             (iff (atj-typep (cdr (assoc-equal key alist)))
                  (assoc-equal key alist))))

  (defrule atj-symbol-type-alistp-of-pairlis$
    (implies (and (symbol-listp keys)
                  (atj-type-listp vals)
                  (equal (len keys) (len vals)))
             (atj-symbol-type-alistp (pairlis$ keys vals)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-to-pred ((x atj-typep))
  :returns (pred pseudo-termfnp)
  :short "ACL2 predicate denoted by an ATJ type."
  :long
  (xdoc::topstring
   (xdoc::p
    "The predicate recognizes the values of the type.")
   (xdoc::p
    "The predicates for the @(':a...') types are straightforward.
     The predicates for the @(':j...') types are
     the recognizers of the corresponding
     Java primitive types and primitive array types
     in our Java language formalization (for primitive types)
     and in our ATJ's model of primitive arrays (for primitive array types).
     Also see "
    (xdoc::seetopic "atj-java-primitives" "here")
    " and "
    (xdoc::seetopic "atj-java-primitive-arrays" "here")
    "."))
  (case x
    (:acharacter 'characterp)
    (:astring 'stringp)
    (:asymbol 'symbolp)
    (:ainteger 'integerp)
    (:arational 'rationalp)
    (:anumber 'acl2-numberp)
    (:acons 'consp)
    (:avalue '(lambda (_) 't))
    (:jboolean 'boolean-value-p)
    (:jchar 'char-value-p)
    (:jbyte 'byte-value-p)
    (:jshort 'short-value-p)
    (:jint 'int-value-p)
    (:jlong 'long-value-p)
    (:jboolean[] 'boolean-array-p)
    (:jchar[] 'char-array-p)
    (:jbyte[] 'byte-array-p)
    (:jshort[] 'short-array-p)
    (:jint[] 'int-array-p)
    (:jlong[] 'long-array-p)
    (otherwise (impossible))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-<= ((sub atj-typep) (sup atj-typep))
  :returns (yes/no booleanp)
  :short "Partial order over ATJ types."
  :long
  (xdoc::topstring
   (xdoc::p
    "The ATJ types form a partial order,
     based on the inclusion of the ACL2 predicates they denote;
     this denotation is defined by @(tsee atj-type-to-pred).")
   (xdoc::p
    "The ordering on the @('a...') types is straightforward.
     The @(':j...') types not ending with @('[]')
     denote ACL2 predicates satisfied only by @(tsee cons)es
     (satisfying additional properties; see "
    (xdoc::seetopic "atj-java-primitives" "here")
    "); thus, such types are below @(':acons') in the partial order.
     The @(':j...[]') types denote true lists,
     which are either @(tsee cons)es or (@('nil')) symbols;
     thus, such types are below @(':avalue') in the partial order.
     The @('j...') types are unrelated to each other in the partial order;
     the corresponding predicates are mostly all disjoint,
     except that the predicates for the @(':j...[]') types
     share @('nil') as the model of the empty array.")
   (xdoc::p
    "To validate this definition of partial order,
     we prove that the relation is indeed a partial order,
     i.e. reflexive, anti-symmetric, and transitive.
     We also prove that @(tsee atj-type-to-pred) is monotonic,
     i.e. that for each subtype/supertype pair
     each value satisfying the subtype's predicate
     also satisfies the supertype's predicate;
     we generate a theorem for each such pair,
     because the predicate inclusion relation is at the meta level.
     The motonocity theorem validates that the partial order
     is consistent with the inclusion of the denoted ACL2 types.")
   (xdoc::p
    "It is also not difficult to see that,
     besides being order-presering (i.e. monotonic),
     @(tsee atj-type-to-pred) is also order-reflecting:
     if @('(atj-type-to-pred x)') is included in @('(atj-type-to-pred y)'),
     then @('(atj-type-<= x y)') holds;
     we may prove this explicitly at some point.
     Being both order-preserving and order-reflecting,
     @(tsee atj-type-to-pred) is an order embedding."))
  (case sub
    (:ainteger (and (member-eq sup '(:ainteger :arational :anumber :avalue)) t))
    (:arational (and (member-eq sup '(:arational :anumber :avalue)) t))
    (:anumber (and (member-eq sup '(:anumber :avalue)) t))
    (:acharacter (and (member-eq sup '(:acharacter :avalue)) t))
    (:astring (and (member-eq sup '(:astring :avalue)) t))
    (:asymbol (and (member-eq sup '(:asymbol :avalue)) t))
    (:acons (and (member-eq sup '(:acons :avalue)) t))
    (:avalue (eq sup :avalue))
    (:jboolean (and (member-eq sup '(:jboolean :acons :avalue)) t))
    (:jchar (and (member-eq sup '(:jchar :acons :avalue)) t))
    (:jbyte (and (member-eq sup '(:jbyte :acons :avalue)) t))
    (:jshort (and (member-eq sup '(:jshort :acons :avalue)) t))
    (:jint (and (member-eq sup '(:jint :acons :avalue)) t))
    (:jlong (and (member-eq sup '(:jlong :acons :avalue)) t))
    (:jboolean[] (and (member-eq sup '(:jboolean[] :avalue)) t))
    (:jchar[] (and (member-eq sup '(:jchar[] :avalue)) t))
    (:jbyte[] (and (member-eq sup '(:jbyte[] :avalue)) t))
    (:jshort[] (and (member-eq sup '(:jshort[] :avalue)) t))
    (:jint[] (and (member-eq sup '(:jint[] :avalue)) t))
    (:jlong[] (and (member-eq sup '(:jlong[] :avalue)) t))
    (otherwise (impossible)))
  ///

  (defrule atj-type-<=-reflexive
    (implies (atj-typep x)
             (atj-type-<= x x)))

  (defrule atj-type-<=-antisymmetric
    (implies (and (atj-typep x)
                  (atj-typep y)
                  (atj-type-<= x y)
                  (atj-type-<= y x))
             (equal x y))
    :rule-classes nil)

  (defrule atj-type-<=-transitive
    (implies (and (atj-typep x)
                  (atj-typep y)
                  (atj-typep z)
                  (atj-type-<= x y)
                  (atj-type-<= y z))
             (atj-type-<= x z))
    :rule-classes nil)

  ;; monotonicity theorem for (SUB, SUP) if SUB <= SUP, otherwise NIL:
  (define atj-type-to-pred-gen-mono-thm ((sub atj-typep) (sup atj-typep))
    (if (atj-type-<= sub sup)
        `((defthm ,(packn (list 'atj-type-to-pred-thm- sub '- sup))
            (implies (,(atj-type-to-pred sub) val)
                     (,(atj-type-to-pred sup) val))
            :rule-classes nil))
      nil))

  ;; monotonicity theorems for all (SUB, SUP) with SUP' in SUPS:
  (define atj-type-to-pred-gen-mono-thms-1 ((sub atj-typep)
                                            (sups atj-type-listp))
    (cond ((endp sups) nil)
          (t (append (atj-type-to-pred-gen-mono-thm sub (car sups))
                     (atj-type-to-pred-gen-mono-thms-1 sub (cdr sups))))))

  ;; monotonicity theorems for all (SUB, SUP) with SUB in SUBS and SUP in SUPS:
  (define atj-type-to-pred-gen-mono-thms-2 ((subs atj-type-listp)
                                            (sups atj-type-listp))
    (cond ((endp subs) nil)
          (t (append (atj-type-to-pred-gen-mono-thms-1 (car subs) sups)
                     (atj-type-to-pred-gen-mono-thms-2 (cdr subs) sups)))))

  ;; monotonicity theorems for all pairs of types:
  (define atj-type-to-pred-gen-mono-thms ()
    (b* ((types '(:ainteger
                  :arational
                  :anumber
                  :acharacter
                  :astring
                  :asymbol
                  :acons
                  :avalue
                  :jboolean
                  :jchar
                  :jbyte
                  :jshort
                  :jint
                  :jlong
                  :jboolean[]
                  :jchar[]
                  :jbyte[]
                  :jshort[]
                  :jint[]
                  :jlong[])))
      `(encapsulate
         ()
         (set-ignore-ok t)
         ,@(atj-type-to-pred-gen-mono-thms-2 types types))))

  ;; macro to generate the monotonicity theorems:
  (defmacro atj-type-to-pred-mono ()
    `(make-event (atj-type-to-pred-gen-mono-thms)))

  ;; generate the monotonicity theorems:
  (atj-type-to-pred-mono))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-< ((sub atj-typep) (sup atj-typep))
  :returns (yes/no booleanp)
  :short "Irreflexive kernel (i.e. strict version) of @(tsee atj-type-<=)."
  (and (atj-type-<= sub sup)
       (not (equal sub sup))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-join ((x atj-typep) (y atj-typep))
  :returns (lub atj-typep)
  :short "Least upper bound of two ATJ types."
  :long
  (xdoc::topstring
   (xdoc::p
    "ATJ types form a join semilattice,
     with the partial order @(tsee atj-type-<=).")
   (xdoc::p
    "To validate this definition of least upper bound,
     we prove that the this operation indeed returns an upper bound
     that is less than or equal to any other upper bound,
     i.e. that it returns the least upper bound.")
   (xdoc::p
    "The commutativity, idempotence, and associativity of the join operation
     follows from these and the partial order properties,
     according to lattice theory.
     So we do not prove these properties explicitly here.")
   (xdoc::p
    "ATJ uses this least upper bound operation
     to calculate the type of an @(tsee if)
     from the types of the `then' and `else' branches."))
  (b* ((x (if (mbt (atj-typep x)) x :avalue))
       (y (if (mbt (atj-typep y)) y :avalue)))
    (case x
      (:acharacter (case y
                     (:acharacter :acharacter)
                     (t :avalue)))
      (:astring (case y
                  (:astring :astring)
                  (t :avalue)))
      (:asymbol (case y
                  (:asymbol :asymbol)
                  (t :avalue)))
      (:ainteger (case y
                   (:ainteger :ainteger)
                   (:arational :arational)
                   (:anumber :anumber)
                   (t :avalue)))
      (:arational (case y
                    ((:ainteger :arational) :arational)
                    (:anumber :anumber)
                    (t :avalue)))
      (:anumber (case y
                  ((:ainteger :arational :anumber) :anumber)
                  (t :avalue)))
      (:acons (case y
                ((:acons :jboolean :jchar :jbyte :jshort :jint :jlong) :acons)
                (t :avalue)))
      (:avalue :avalue)
      (:jboolean (case y
                   (:jboolean :jboolean)
                   ((:jchar :jbyte :jshort :jint :jlong :acons) :acons)
                   (t :avalue)))
      (:jchar (case y
                (:jchar :jchar)
                ((:jboolean :jbyte :jshort :jint :jlong :acons) :acons)
                (t :avalue)))
      (:jbyte (case y
                (:jbyte :jbyte)
                ((:jboolean :jchar :jshort :jint :jlong :acons) :acons)
                (t :avalue)))
      (:jshort (case y
                 (:jshort :jshort)
                 ((:jboolean :jchar :jbyte :jint :jlong :acons) :acons)
                 (t :avalue)))
      (:jint (case y
               (:jint :jint)
               ((:jboolean :jchar :jbyte :jshort :jlong :acons) :acons)
               (t :avalue)))
      (:jlong (case y
                (:jlong :jlong)
                ((:jboolean :jchar :jbyte :jshort :jint :acons) :acons)
                (t :avalue)))
      (:jboolean[] (case y
                     (:jboolean[] :jboolean[])
                     (t :avalue)))
      (:jchar[] (case y
                  (:jchar[] :jchar[])
                  (t :avalue)))
      (:jbyte[] (case y
                  (:jbyte[] :jbyte[])
                  (t :avalue)))
      (:jshort[] (case y
                   (:jshort[] :jshort[])
                   (t :avalue)))
      (:jint[] (case y
                 (:jint[] :jint[])
                 (t :avalue)))
      (:jlong[] (case y
                  (:jlong[] :jlong[])
                  (t :avalue)))
      (otherwise (impossible))))
  ///

  (defrule atj-type-join-upper-bound
    (implies (and (atj-typep x)
                  (atj-typep y))
             (and (atj-type-<= x (atj-type-join x y))
                  (atj-type-<= y (atj-type-join x y))))
    :enable atj-type-<=)

  (defrule atj-type-join-least
    (implies (and (atj-typep x)
                  (atj-typep y)
                  (atj-typep z)
                  (atj-type-<= x z)
                  (atj-type-<= y z))
             (atj-type-<= (atj-type-join x y) z))
    :enable atj-type-<=))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-list-<= ((sub atj-type-listp) (sup atj-type-listp))
  :returns (yes/no booleanp)
  :short "Lift @(tsee atj-type-<=) to lists."
  :long
  (xdoc::topstring
   (xdoc::p
    "Lists are ordered element-wise.
     Given two lists of different lengths
     such that the shorter one is a prefix of the longer one
     (i.e. the two lists cannot be ordered based on their initial elements),
     the shorter one is smaller than the longer one.")
   (xdoc::p
    "We show that the resulting relation is a partial order,
     i.e. reflexive, anti-symmetric, and transitive."))
  (cond ((endp sub) t)
        ((endp sup) nil)
        (t (and (atj-type-<= (car sub) (car sup))
                (atj-type-list-<= (cdr sub) (cdr sup)))))
  ///

  (defrule atj-type-list-<=-reflexive
    (implies (atj-type-listp x)
             (atj-type-list-<= x x)))

  (defrule atj-type-list-<=-antisymmetric
    (implies (and (atj-type-listp x)
                  (atj-type-listp y)
                  (atj-type-list-<= x y)
                  (atj-type-list-<= y x))
             (equal x y))
    :rule-classes nil
    :hints ('(:use (:instance atj-type-<=-antisymmetric
                    (x (car x)) (y (car y))))))

  (defrule atj-type-list-<=-transitive
    (implies (and (atj-type-listp x)
                  (atj-type-listp y)
                  (atj-type-listp z)
                  (atj-type-list-<= x y)
                  (atj-type-list-<= y z))
             (atj-type-list-<= x z))
    :rule-classes nil
    :hints ('(:use (:instance atj-type-<=-transitive
                    (x (car x)) (y (car y)) (z (car z)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-list-< ((sub atj-type-listp) (sup atj-type-listp))
  :returns (yes/no booleanp)
  :short "Irreflexive kernel (i.e. strict version)
          of @(tsee atj-type-list-<=)."
  (and (atj-type-list-<= sub sup)
       (not (equal sub sup))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-list-join ((x atj-type-listp) (y atj-type-listp))
  :returns (lub atj-type-listp)
  :short "Lift @(tsee atj-type-join) to lists."
  :long
  (xdoc::topstring
   (xdoc::p
    "This is done element-wise.
     When the shorter list is exhausted,
     we return (what remains of) the longer list.")
   (xdoc::p
    "We show that this indeed returns the least upper bound
     of the order relation lifted to lists."))
  (cond ((endp x) (if (mbt (atj-type-listp y))
                      y
                    (repeat (len y) :avalue)))
        ((endp y) (if (mbt (atj-type-listp x))
                      x
                    (repeat (len x) :avalue)))
        (t (cons (atj-type-join (car x) (car y))
                 (atj-type-list-join (cdr x) (cdr y)))))
  ///

  (defrule atj-type-list-join-upper-bound
    (implies (and (atj-type-listp x)
                  (atj-type-listp y))
             (and (atj-type-list-<= x (atj-type-list-join x y))
                  (atj-type-list-<= y (atj-type-list-join x y))))
    :enable atj-type-list-<=)

  (defrule atj-type-list-join-least
    (implies (and (atj-type-listp x)
                  (atj-type-listp y)
                  (atj-type-listp z)
                  (atj-type-list-<= x z)
                  (atj-type-list-<= y z))
             (atj-type-list-<= (atj-type-list-join x y) z))
    :enable atj-type-list-<=)

  (defret consp-of-atj-type-list-join
    (equal (consp lub)
           (or (consp x)
               (consp y)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-to-jitype ((type atj-typep))
  :returns (jtype atj-jitypep)
  :short "Java input type denoted by an ATJ type."
  :long
  (xdoc::topstring
   (xdoc::p
    "The @(':a...') types denote the corresponding AIJ class types.
     The @(':j...') types that do not end with @('[]') denote
     the corresponding Java primitive types.
     The @(':j...[]') types denote
     the corresponding Java primitive array types."))
  (case type
    (:acharacter *aij-type-char*)
    (:astring *aij-type-string*)
    (:asymbol *aij-type-symbol*)
    (:ainteger *aij-type-int*)
    (:arational *aij-type-rational*)
    (:anumber *aij-type-number*)
    (:acons *aij-type-cons*)
    (:avalue *aij-type-value*)
    (:jboolean (jtype-boolean))
    (:jchar (jtype-char))
    (:jbyte (jtype-byte))
    (:jshort (jtype-short))
    (:jint (jtype-int))
    (:jlong (jtype-long))
    (:jboolean[] (jtype-array (jtype-boolean)))
    (:jchar[] (jtype-array (jtype-char)))
    (:jbyte[] (jtype-array (jtype-byte)))
    (:jshort[] (jtype-array (jtype-short)))
    (:jint[] (jtype-array (jtype-int)))
    (:jlong[] (jtype-array (jtype-long)))
    (otherwise (prog2$ (impossible) *aij-type-value*))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-list-to-jitype-list ((types atj-type-listp))
  :returns (jtypes atj-jitype-listp)
  :short "Lift @(tsee atj-type-to-jitype) to lists."
  (cond ((endp types) nil)
        (t (cons (atj-type-to-jitype (car types))
                 (atj-type-list-to-jitype-list (cdr types)))))
  ///

  (defret len-of-atj-type-list-to-jitype-list
    (equal (len jtypes)
           (len types))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-list-list-to-jitype-list-list ((typess atj-type-list-listp))
  :returns (jtypess atj-jitype-list-listp)
  :short "Lift @(tsee atj-type-list-to-jitype-list) to lists."
  (cond ((endp typess) nil)
        (t (cons (atj-type-list-to-jitype-list (car typess))
                 (atj-type-list-list-to-jitype-list-list (cdr typess)))))
  ///

  (defret len-of-atj-type-list-to-jitype-list-list
    (equal (len jtypess)
           (len typess))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-of-value (val)
  :returns (type atj-typep)
  :short "ATJ type of an ACL2 value."
  :long
  (xdoc::topstring
   (xdoc::p
    "This is the type that ATJ assigns to a quoted constant
     with the given value.
     Note that a constant like @('2') does not get type @(':jint').
     Instead, ATJ assigns @(':jint') to a term like @('(int-value 2)')
     (when @(':deep') is @('nil') and @(':guards') is @('t'));
     see the code generation functions."))
  (cond ((characterp val) :acharacter)
        ((stringp val) :astring)
        ((symbolp val) :asymbol)
        ((integerp val) :ainteger)
        ((rationalp val) :arational)
        ((acl2-numberp val) :anumber)
        ((consp val) :acons)
        (t :avalue)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(std::defaggregate atj-function-type
  :short "Recognize ATJ function types."
  :long
  (xdoc::topstring
   (xdoc::p
    "An ATJ function type consists of
     (zero or more) types for the arguments (i.e. inputs)
     and (one or more) types for the results (i.e. outputs).
     This is like an arrow type in higher-order languages."))
  ((inputs atj-type-listp)
   (outputs atj-type-listp)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(std::deflist atj-function-type-listp (x)
  :short "Recognize true lists of ATJ function types."
  (atj-function-type-p x)
  :true-listp t
  :elementp-of-nil nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-function-type-list->inputs ((fn-types atj-function-type-listp))
  :returns (in-typess atj-type-list-listp :hyp :guard)
  :short "Lift @(tsee atj-function-type->inputs) to lists."
  (cond ((endp fn-types) nil)
        (t (cons (atj-function-type->inputs (car fn-types))
                 (atj-function-type-list->inputs (cdr fn-types))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-function-type-list->outputs ((fn-types atj-function-type-listp))
  :returns (out-typess atj-type-list-listp :hyp :guard)
  :short "Lift @(tsee atj-function-type->outputs) to lists."
  (cond ((endp fn-types) nil)
        (t (cons (atj-function-type->outputs (car fn-types))
                 (atj-function-type-list->outputs (cdr fn-types))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(std::defaggregate atj-function-type-info
  :short "Recognize ATJ function type information."
  :long
  (xdoc::topstring
   (xdoc::p
    "In general, each ACL2 function has, associated with it,
     a primary (`main') function type
     and zero or more secondary (`other') function types,
     as mentioned in " (xdoc::seetopic "atj-types" "here") "."))
  ((main atj-function-type-p)
   (others atj-function-type-listp)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-function-type-info->outputs ((info atj-function-type-info-p))
  :returns (out-typess atj-type-list-listp :hyp :guard)
  :short "Return the list of all the output type lists
          in a function's type information."
  (cons
   (atj-function-type->outputs (atj-function-type-info->main info))
   (atj-function-type-list->outputs (atj-function-type-info->others info))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-maybe-function-type-info-p (x)
  :returns (yes/no booleanp)
  :short "Recognize ATJ function type information and @('nil')."
  (or (atj-function-type-info-p x)
      (null x))
  ///

  (defrule atj-maybe-function-type-info-p-when-atj-function-type-info-p
    (implies (atj-function-type-info-p x)
             (atj-maybe-function-type-info-p x))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defval *atj-function-type-info-table-name*
  :short "Name of the table that associates ATJ types to ACL2 functions."
  'atj-function-type-info-table)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defsection atj-function-type-info-table
  :short "Table that associates ATJ types to ACL2 functions."
  :long
  (xdoc::topstring
   (xdoc::p
    "This table is populated by successful calls of
     the @(tsee def-atj-main-function-type)
     and @(tsee def-atj-other-function-type) macros."))
  (make-event
   `(table ,*atj-function-type-info-table-name* nil nil
      :guard (and (symbolp acl2::key)
                  (atj-function-type-info-p acl2::val)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-get-function-type-info-from-table ((fn symbolp) (wrld plist-worldp))
  :returns (fn-info? atj-maybe-function-type-info-p)
  :short "Retrieve the ATJ function type information
          of the specified function from the table."
  :long
  (xdoc::topstring-p
   "If the table has no entry for the function, @('nil') is returned.")
  (b* ((table (table-alist+ *atj-function-type-info-table-name* wrld))
       (pair (assoc-eq fn table))
       ((when pair)
        (b* ((fn-info (cdr pair)))
          (if (atj-function-type-info-p fn-info)
              fn-info
            (raise "Internal error: ~
                    malformed function information ~x0 for function ~x1."
                   fn-info fn)))))
    nil)
  :prepwork ((local (include-book "std/alists/assoc" :dir :system)))
  ///

  (defrule atj-function-type-info-p-of-atj-get-function-type-info-from-table
    (iff (atj-function-type-info-p
          (atj-get-function-type-info-from-table fn wrld))
         (atj-get-function-type-info-from-table fn wrld))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-function-type-info-default ((fn symbolp) (wrld plist-worldp))
  :returns (fn-info atj-function-type-info-p)
  :short "Default ATJ function type information for a function."
  :long
  (xdoc::topstring
   (xdoc::p
    "This is used when a function has no entry in the table.
     It consists of a primary function type of all @(':avalue') types,
     and no secondary function types.")
   (xdoc::p
    "To calculate the output types,
     we need the number of results returned by @('fn'),
     which cannot be determined if @('fn') is
     one of the functions whose output stobjs are invalid,
     i.e. @(tsee if) or @(tsee return-last).
     We regard these two functions as returning a single result."))
  (b* ((number-of-inputs (arity+ fn wrld))
       (number-of-outputs (if (member-eq fn *stobjs-out-invalid*)
                              1
                            (number-of-results+ fn wrld))))
    (make-atj-function-type-info
     :main (make-atj-function-type
            :inputs (repeat number-of-inputs :avalue)
            :outputs (repeat number-of-outputs :avalue))
     :others nil)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-get-function-type-info ((fn symbolp)
                                    (guards$ booleanp)
                                    (wrld plist-worldp))
  :returns (fn-info atj-function-type-info-p)
  :short "Obtain the ATJ function type information of the specified function."
  :long
  (xdoc::topstring
   (xdoc::p
    "If the @(':guards') input is @('t'),
     we retrieve the type information from the table
     via @(tsee atj-get-function-type-info-from-table).
     If the @(':guards') input is @('nil'),
     we return the defult function type information,
     because in this case types are effectively ignored."))
  (if guards$
      (b* ((fn-info? (atj-get-function-type-info-from-table fn wrld)))
        (or fn-info? (atj-function-type-info-default fn wrld)))
    (atj-function-type-info-default fn wrld)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-main-function-type-input-theorem ((fn symbolp)
                                              (guard pseudo-termp)
                                              (formal symbolp)
                                              (in-type atj-typep)
                                              (wrld plist-worldp))
  :returns (event "A @(tsee acl2::pseudo-event-formp).")
  :mode :program ; because of UNTRANSLATE
  :short "Theorem generated by @(tsee def-atj-main-function-type)
          for an input of an ACL2 function."
  :long
  (xdoc::topstring
   (xdoc::p
    "The theorem states that, under the guard,
     the specified formal argument satisfies the predicate
     that corresponds to the specified type.")
   (xdoc::p
    "The theorem has no rule classes because its only purpose is
     to make sure that its formula holds.
     The theorem is local (to the @(tsee encapsulate) generated by the macro)
     for the same reason."))
  (b* ((thm-name (packn-pos (list 'atj- fn '-input- formal '- in-type)
                            (pkg-witness (symbol-package-name fn))))
       (thm-formula (implicate guard
                               `(,(atj-type-to-pred in-type) ,formal))))
    `(local
      (defthm ,thm-name
        ,(untranslate thm-formula t wrld)
        :rule-classes nil))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-main-function-type-input-theorems ((fn symbolp)
                                               (guard pseudo-termp)
                                               (formals symbol-listp)
                                               (in-types atj-type-listp)
                                               (wrld plist-worldp))
  :guard (= (len formals) (len in-types))
  :returns (events "A @(tsee acl2::pseudo-event-form-listp).")
  :mode :program ; because of ATJ-MAIN-FUNCTION-TYPE-INPUT-THEOREM
  :short "Theorems generated by @(tsee def-atj-main-function-type)
          for all the inputs of an ACL2 function."
  :long
  (xdoc::topstring
   (xdoc::p
    "This lifts @(tsee atj-main-function-type-input-theorem) to lists."))
  (if (endp formals)
      nil
    (cons (atj-main-function-type-input-theorem
           fn guard (car formals) (car in-types) wrld)
          (atj-main-function-type-input-theorems
           fn guard (cdr formals) (cdr in-types) wrld))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-main-function-type-output-theorem ((fn symbolp)
                                               (guard pseudo-termp)
                                               (formals symbol-listp)
                                               (result maybe-natp)
                                               (out-type atj-typep)
                                               (wrld plist-worldp))
  :returns (event "A @(tsee acl2::pseudo-event-formp).")
  :mode :program ; because of UNTRANSLATE
  :short "Theorem generated by @(tsee def-atj-main-function-type)
          for the/an output of an ACL2 function."
  :long
  (xdoc::topstring
   (xdoc::p
    "The @('result') parameter is @('nil') if @('fn') returns a single result;
     otherwise, it is the (0-based) index of one of the @('fn')'s results.")
   (xdoc::p
    "The theorem states that, under the guard,
     the result of the function (applied to its formals)
     satisfies the predicate that corresponds to the specified type.")
   (xdoc::p
    "The theorem has no rule classes because its only purpose is
     to make sure that its formula holds.
     The theorem is local (to the @(tsee encapsulate) generated by the macro)
     for the same reason."))
  (b* ((thm-name (if result
                     (packn-pos (list 'atj- fn '-output- result '- out-type)
                                (pkg-witness (symbol-package-name fn)))
                   (packn-pos (list 'atj- fn '-output- out-type)
                              (pkg-witness (symbol-package-name fn)))))
       (fn-result (if result
                      `(mv-nth ,result (,fn ,@formals))
                    `(,fn ,@formals)))
       (thm-formula (implicate guard
                               `(,(atj-type-to-pred out-type) ,fn-result))))
    `(local
      (defthm ,thm-name
        ,(untranslate thm-formula t wrld)
        :rule-classes nil))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-main-function-type-output-theorems ((fn symbolp)
                                                (guard pseudo-termp)
                                                (formals symbol-listp)
                                                (nresults natp)
                                                (out-types atj-type-listp)
                                                (wrld plist-worldp))
  :guard (= nresults (len out-types))
  :returns (events "A @(tsee acl2::pseudo-event-form-listp).")
  :mode :program ; because of ATJ-MAIN-FUNCTION-TYPE-OUTPUT-THEOREM
  :short "Theorems generated by @(tsee def-atj-main-function-type)
          for all the outputs of a multi-valued ACL2 function."
  :long
  (xdoc::topstring
   (xdoc::p
    "This is only used when @('fn') returns multiple values.
     We generate an output type theorem for each,
     counting down from @('nresults - 1') to 0."))
  (if (zp nresults)
      nil
    (cons (atj-main-function-type-output-theorem
           fn guard formals (1- nresults) (car out-types) wrld)
          (atj-main-function-type-output-theorems
           fn guard formals (1- nresults) (cdr out-types) wrld))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define def-atj-main-function-type-fn (fn
                                       in-types
                                       out-type/types
                                       (wrld plist-worldp))
  :returns (event "A @(tsee acl2::maybe-pseudo-event-formp).")
  :mode :program ; because of ATJ-MAIN-FUNCTION-TYPE-INPUT/OUTPUT-THEOREM(S)
  :short "Top-level event generated by @(tsee def-atj-main-function-type)."
  :long
  (xdoc::topstring
   (xdoc::p
    "This includes the theorems for the function inputs and outputs,
     as well as an event to record the function type in the table.")
   (xdoc::p
    "If the table already includes an entry for the function,
     the proposed function type is compared with the existing one.
     If they are the same, the call is considered redundant
     and no further action is taken.
     If they differ, it is an error."))
  (b* (((unless (symbolp fn))
        (raise "The first input, ~x0, must be a symbol." fn))
       (formals (formals fn wrld)) ; error if not FUNCTION-SYMBOLP
       ((unless (atj-type-listp in-types))
        (raise "The second input, ~x0, must be a true list of types."
               in-types))
       ((unless (= (len in-types) (len formals)))
        (raise "The number of input types ~x0 must match ~
                the arity ~x1 of the function ~x2."
               in-types (len formals) fn))
       (nresults (if (member-eq fn *stobjs-out-invalid*)
                     1
                   (number-of-results+ fn wrld)))
       (out-types (if (= nresults 1)
                      (if (atj-typep out-type/types)
                          (list out-type/types)
                        (raise "The third input, ~x0, must be a type; ~
                                note that ~x1 returns a single result."
                               out-type/types fn))
                    (if (atj-type-listp out-type/types)
                        out-type/types
                      (raise "The third input, ~x0, ~
                              must be a true list of types; ~
                              note that ~x1 returns multiple results."
                             out-type/types fn))))
       ((unless (= nresults (len out-types)))
        (raise "The number of output types ~x0 must match ~
                the number of results ~x1 of the function ~x2."
               out-types nresults fn))
       (fn-info? (atj-get-function-type-info-from-table fn wrld))
       ((when fn-info?)
        (b* ((main (atj-function-type-info->main fn-info?)))
          (if (and (equal (atj-function-type->inputs main) in-types)
                   (equal (atj-function-type->outputs main) out-types))
              `(value-triple :redundant)
            (raise "The proposed ATJ main function type [~x0 -> ~x1] for ~x2 ~
                    differs from the already recorded [~x3 -> ~x4]."
                   in-types
                   out-types
                   fn
                   (atj-function-type->inputs main)
                   (atj-function-type->outputs main)))))
       (guard (guard fn nil wrld))
       (input-thms
        (atj-main-function-type-input-theorems fn guard formals in-types wrld))
       (output-thms
        (if (= nresults 1)
            (list (atj-main-function-type-output-theorem
                   fn guard formals nil (car out-types) wrld))
          (atj-main-function-type-output-theorems
           fn guard formals nresults out-types wrld)))
       (fn-ty (make-atj-function-type :inputs in-types :outputs out-types))
       (fn-info (make-atj-function-type-info :main fn-ty :others nil)))
    `(encapsulate
       ()
       (set-ignore-ok t)
       ,@input-thms
       ,@output-thms
       (table ,*atj-function-type-info-table-name* ',fn ',fn-info))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defsection def-atj-main-function-type
  :short (xdoc::topstring
          "Macro to prove and record the primary input and output "
          (xdoc::seetopic "atj-types" "types")
          " of an ACL2 function.")
  :long
  (xdoc::topstring
   (xdoc::p
    "This has to be used on the functions of interest
     (i.e. functions for which we want to generate Java code)
     prior to calling ATJ,
     so that ATJ can take advantage of the type information
     recorded for the functions.
     This is only relevant
     when @(':deep') is @('nil') and @(':guards') is @('t');
     in all other cases, the type information is ignored.")
   (xdoc::p
    "For instance, the file @('types-for-natives.lisp') uses this macro
     on the ACL2 functions that are implemented natively in AIJ.")
   (xdoc::p
    "If ATJ encounters a function that is not in the table,
     it assumes the widest possible type (i.e. the one for all ACL2 values)
     for all the inputs and outputs of the function.
     See the code generation functions for details.")
   (xdoc::@def "def-atj-main-function-type"))
  (defmacro def-atj-main-function-type (fn in-types out-type/types)
    `(make-event
      (def-atj-main-function-type-fn
        ',fn ',in-types ',out-type/types (w state)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-other-function-type-theorem ((fn symbolp)
                                         (guard pseudo-termp)
                                         (formals symbol-listp)
                                         (in-types atj-type-listp)
                                         (result maybe-natp)
                                         (out-type atj-typep)
                                         (wrld plist-worldp))
  :guard (= (len formals) (len in-types))
  :returns (event "A @(tsee acl2::pseudo-event-formp).")
  :mode :program ; because of UNTRANSLATE
  :short "Theorem generated by @(tsee def-atj-other-function-type)
          for the/an output of an ACL2 function."
  :long
  (xdoc::topstring
   (xdoc::p
    "The @('result') parameter is @('nil') if @('fn') returns a single result;
     otherwise, it is the (0-based) index of one of the @('fn')'s results.")
   (xdoc::p
    "The theorem states that if the formal parameters
     satisfy both the function's guard
     and the predicates that correspond to the input types,
     then the result of the function (applied to its formal parameters)
     satisfies the predicate that corresponds to the output type.")
   (xdoc::p
    "The theorem has no rule classes because its only purpose is
     to make sure that its formula holds.
     The theorem is local (to the @(tsee encapsulate) generated by the macro)
     for the same reason."))
  (b* ((thm-name (if result
                     (packn-pos (list 'atj- fn '-other-type- result '- out-type)
                                (pkg-witness (symbol-package-name fn)))
                   (packn-pos (list 'atj- fn '-other-type)
                              (pkg-witness (symbol-package-name fn)))))
       (type-hyps (atj-other-function-type-theorem-aux formals in-types))
       (fn-result (if result
                      `(mv-nth ,result (,fn ,@formals))
                    `(,fn ,@formals)))
       (concl `(,(atj-type-to-pred out-type) ,fn-result))
       (thm-formula (implicate (conjoin (cons guard type-hyps)) concl)))
    `(local
      (defthm ,thm-name
        ,(untranslate thm-formula t wrld)
        :rule-classes nil)))

  :prepwork
  ((define atj-other-function-type-theorem-aux ((formals symbol-listp)
                                                (in-types atj-type-listp))
     :guard (= (len formals) (len in-types))
     :returns (terms pseudo-term-listp
                     :hyp :guard
                     :hints (("Goal" :in-theory (enable atj-type-to-pred))))
     :parents nil
     (cond ((endp formals) nil)
           (t (cons `(,(atj-type-to-pred (car in-types)) ,(car formals))
                    (atj-other-function-type-theorem-aux (cdr formals)
                                                         (cdr in-types))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-other-function-type-theorems ((fn symbolp)
                                          (guard pseudo-termp)
                                          (formals symbol-listp)
                                          (in-types atj-type-listp)
                                          (nresults natp)
                                          (out-types atj-type-listp)
                                          (wrld plist-worldp))
  :guard (= nresults (len out-types))
  :returns (events "A @(tsee acl2::pseudo-event-form-listp).")
  :mode :program ; because of ATJ-OTHER-FUNCTION-TYPE-THEOREM
  :short "Theorems generated by @(tsee def-atj-other-function-type)
          for all the outputs of a multi-valued ACL2 function."
  :long
  (xdoc::topstring
   (xdoc::p
    "This is only used when @('fn') returns multiple values.
     We generate an output type theorem for each,
     counting down from @('nresults - 1') to 0."))
  (if (zp nresults)
      nil
    (cons (atj-other-function-type-theorem
           fn guard formals in-types (1- nresults) (car out-types) wrld)
          (atj-other-function-type-theorems
           fn guard formals in-types (1- nresults) (cdr out-types) wrld))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-check-other-function-type ((new-in-types atj-type-listp)
                                       (old-fn-types atj-function-type-listp)
                                       (all-in-jtypess atj-jitype-list-listp))
  :returns (yes/no booleanp)
  :short "Check the new input types
          passed to @(tsee def-atj-other-function-type)
          against the existing secondary function types."
  :long
  (xdoc::topstring
   (xdoc::p
    "The primary and secondary input types attached to a function
     are used to generate overloaded methods for the function.
     It must be possible, at compile time, to always resolve the method,
     based on the most specific argument types.
     This should be guaranteed if the set of all the function's input types
     (more precisely, the set of all the input type tuples of the function)
     is closed under greatest lower bounds that do not include @('nil')s,
     as explained below.")
   (xdoc::p
    "For example, consider a binary function @('f')
     with two function types whose inputs are
     @('(:arational :ainteger)') and @('(:ainteger :arational)').
     These will give rise to two overloaded methods for @('f'),
     one with argument types @('Acl2Rational') and @('Acl2Integer'),
     and one with argument types @('Acl2Integer') and @('Acl2Rational').
     Consider a method call whose actual argument types
     are @('Acl2Integer') and @('Acl2Integer'):
     if only those two overloaded methods are available,
     then there is no most specific method that is based just on the types.
     However, if a third overloaded method were available
     with @('Acl2Integer') and @('Acl2Integer') as argument types,
     that would be the most specific method to call.
     This is the case if the table includes a function type for @('f')
     with input types @('(:ainteger :ainteger)').")
   (xdoc::p
    "Generalizing from this example,
     we want the set of all function input types
     to be closed under greatest lower bounds
     (w.r.t. the Java type partial order).
     This way, if some tuple of actual arguments
     fits two different overloaded methods,
     it will also fit the method corresponding to the greatest lower bound;
     therefore, there will be always a ``minimum'' method
     that will be selected at compile time and called at run time.
     However, recall that @(tsee atj-maybe-jitype-meet) may produce @('nil'):
     if the greatest lower bound contains a @('nil') component,
     the closure requirement does not apply,
     because it means that some types are incompatible
     and therefore there is no confusion about most specific types.")
   (xdoc::p
    "Besides the closure property just explained,
     we also ensure that the proposed new input types
     differ from all the existing secondary input types.
     We maintain the uniqueness, for each function,
     of the (primary and secondary) input types in the table,
     so that there is exactly one overloaded method for each input type tuple.
     Redundant calls of @(tsee def-atj-other-function-type)
     are handled before calling this function.")
   (xdoc::p
    "The @('new-in-types') parameter of this function
     consist of the new proposed input types.
     The @('old-fn-types') parameter
     consists of all the existing secondary input types already in the table,
     which we @(tsee cdr) through and compare against @('new-in-types').
     The @('all-in-jtypess') parameter of this function
     consists of the Java type counterparts of
     all the tuples of existing secondary input types in the table,
     plus @('new-in-types');
     this stays constant, we do not @(tsee cdr) through it
     because we need the whole collection to check the closure property.
     We include (the Java type counterpart of) @('new-in-types')
     because the new proposed input types contribute to the closure properties:
     they will be in the table if all the checks succeed;
     for instance, if only @(':arational') is in the table
     and we are trying to add @(':ainteger'),
     their greatest lower bound is @(':ainteger'),
     which will be in the table.
     The primary function type is not included
     in @('old-fn-types') or @('all-in-jtypess'),
     because the primary input types are always checked
     to be strictly wider than @('new-in-types'),
     in @(tsee def-atj-other-function-type-fn)."))
  (b* (((when (endp old-fn-types)) t)
       (old-fn-type (car old-fn-types))
       (old-in-types (atj-function-type->inputs old-fn-type))
       ((when (equal new-in-types old-in-types))
        (raise "The proposed input types ~x0 must differ from ~
                the existing secondary input types ~
                for the function, ~
                but they are equal to some of these existing types."
               new-in-types))
       (old-in-jtypes (atj-type-list-to-jitype-list old-in-types))
       (new-in-jtypes (atj-type-list-to-jitype-list new-in-types))
       (glb (atj-maybe-jitype-list-meet old-in-jtypes new-in-jtypes))
       ((unless (or (member-eq nil glb)
                    (member-equal glb all-in-jtypess)))
        (raise "The Java counterparts ~x0 of the proposed input types ~x1 ~
                and the Java counterparts ~x2 of ~
                some existing secondary input types ~x3, ~
                have a greatest lower bound ~x4 ~
                that is not the Java counterpart ~
                of any types currently in the table ~
                or of the proposed input types. ~
                This may cause ambiguities in resolving method overloading. ~
                Consider adding types whose Java counterparts are ~x4 first, ~
                and then the proposed input types ~x1."
               new-in-jtypes new-in-types
               old-in-jtypes old-in-types
               glb)))
    (atj-check-other-function-type new-in-types
                                   (cdr old-fn-types)
                                   all-in-jtypess)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define def-atj-other-function-type-fn (fn
                                        in-types
                                        out-type/types
                                        (wrld plist-worldp))
  :returns (event "A @(tsee acl2::maybe-pseudo-event-formp).")
  :mode :program ; because of ATJ-OTHER-FUNCTION-TYPE-THEOREM
  :short "Top-level event generated by @(tsee def-atj-other-function-type)."
  :long
  (xdoc::topstring
   (xdoc::p
    "This includes the theorem(s) stating that
     the guard and input types imply the output type(s),
     as well as an event to record the function type in the table.")
   (xdoc::p
    "It is an error if the function does not have a primary type already;
     that is, @(tsee def-atj-main-function-type) must be called
     before calling @(tsee def-atj-other-function-type).")
   (xdoc::p
    "The proposed input types must be narrower than the primary input types;
     otherwise, there would be no advantage
     in adding these secondary input types,
     and in generating overloaded method corresponding to these types.
     The proposed output types must be narrower than or the same as
     the primary output types:
     since the primary output types are proved under the guard assumption only,
     while the secondary output types are proved
     with additional type hypotheses,
     it does not make sense that the secondary output types
     is wider than, or unrelated to, the primary output types;
     this situation probably signals the misstatement of some types
     to either @(tsee def-atj-main-function-type)
     or @(tsee def-atj-other-function-type).")
   (xdoc::p
    "If the proposed function type is already in the table,
     the call of @(tsee def-atj-other-function-type) is considered redundant
     and no further action is taken.")
   (xdoc::p
    "We also ensure that the addition of the proposed types
     does not cause method overloading ambiguities:
     see @(tsee atj-check-other-function-type) for details.")
   (xdoc::p
    "We may add additional sanity checks in the future,
     e.g. that if the new input types are narrower than or equal to
     some already existing secondary types,
     then the output types must satisfy that relation too.
     The reason is analogous to the one discussed above
     to motivate the check against the primary output types;
     but here we are talking about the secondary output types."))
  (b* (((unless (symbolp fn))
        (raise "The first input, ~x0, must be a symbol." fn))
       (formals (formals fn wrld)) ; error if not FUNCTION-SYMBOLP
       ((unless (atj-type-listp in-types))
        (raise "The second input, ~x0, must be a true list of types." in-types))
       ((unless (= (len in-types) (len formals)))
        (raise "The number of input types ~x0 must match ~
                the arity ~x1 of the function ~x2."
               in-types (len formals) fn))
       (nresults (if (member-eq fn *stobjs-out-invalid*)
                     1
                   (number-of-results+ fn wrld)))
       (out-types (if (= nresults 1)
                      (if (atj-typep out-type/types)
                          (list out-type/types)
                        (raise "The third input, ~x0, must be a type; ~
                                note that ~x1 returns a single result."
                               out-type/types fn))
                    (if (atj-type-listp out-type/types)
                        out-type/types
                      (raise "The third input, ~x0, ~
                              must be a true list of types; ~
                              note that ~x1 returns multiple results."
                             out-type/types fn))))
       ((unless (= nresults (len out-types)))
        (raise "The number of output types ~x0 must match ~
                the number of results ~x1 of the function ~x2."
               out-types nresults fn))
       (fn-info? (atj-get-function-type-info-from-table fn wrld))
       ((unless fn-info?)
        (raise "The function ~x0 does not have a primary function type yet. ~
                Use DEF-ATJ-MAIN-FUNCTION-TYPE to define it, ~
                and then try again this DEF-ATJ-OTHER-FUNCTION-TYPE."
               fn))
       (main-fn-type (atj-function-type-info->main fn-info?))
       (main-in-types (atj-function-type->inputs main-fn-type))
       (main-out-types (atj-function-type->outputs main-fn-type))
       ((unless (atj-type-list-< in-types main-in-types))
        (raise "The proposed inputs types ~x0 must be strictly narrower ~
                than the primary input types ~x1."
               in-types main-in-types))
       ((unless (atj-type-list-<= out-types main-out-types))
        (raise "The proposed output types ~x0 must be ~
                narrower than or equal to, ~
                the primary output types ~x1."
               out-types main-out-types))
       (other-fn-types (atj-function-type-info->others fn-info?))
       (new-fn-type (make-atj-function-type :inputs in-types
                                            :outputs out-types))
       ((when (member-equal new-fn-type other-fn-types))
        `(value-triple :redundant))
       (other-in-types (atj-function-type-list->inputs other-fn-types))
       (all-in-jtypess (atj-type-list-list-to-jitype-list-list
                        (cons in-types other-in-types)))
       (- (atj-check-other-function-type in-types
                                         other-fn-types
                                         all-in-jtypess))
       (guard (guard fn nil wrld))
       (thms
        (if (= nresults 1)
            (list (atj-other-function-type-theorem
                   fn guard formals in-types nil (car out-types) wrld))
          (atj-other-function-type-theorems
           fn guard formals in-types nresults out-types wrld)))
       (new-fn-info (change-atj-function-type-info
                     fn-info? :others (cons new-fn-type other-fn-types))))
    `(encapsulate
       ()
       (set-ignore-ok t)
       ,@thms
       (table ,*atj-function-type-info-table-name* ',fn ',new-fn-info))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defsection def-atj-other-function-type
  :short (xdoc::topstring
          "Macro to prove and record secondary input and output "
          (xdoc::seetopic "atj-types" "types")
          " of an ACL2 function.")
  :long
  (xdoc::topstring
   (xdoc::p
    "This has to be used on the functions of interest
     (i.e. functions for which we want to generate Java code)
     prior to calling ATJ,
     so that ATJ can take advantage of the type information
     recorded for the functions.
     This is only relevant
     when @(':deep') is @('nil') and @(':guards') is @('t');
     in all other cases, the type information is ignored.")
   (xdoc::p
    "Each of the successful calls of this macro
     will result in an overloaded method with the specified types."))
  (defmacro def-atj-other-function-type (fn in-types out-type/types)
    `(make-event
      (def-atj-other-function-type-fn
        ',fn ',in-types ',out-type/types (w state)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-output-types-of-min-input-types ((in-types atj-type-listp)
                                             (fn-types atj-function-type-listp))
  :returns (out-types? atj-type-listp :hyp :guard)
  :short "Output types for the minimum input types."
  :long
  (xdoc::topstring
   (xdoc::p
    "When this function is called,
     @('in-types') are the types inferred for
     the actual arguments of a function call,
     and @('fn-types') are all the function types (primary and secondary)
     of the called function.
     The goal here is to see if the argument types match any function type,
     in the sense that the Java counterparts
     of the input types of the function type
     are greater than or equal to the Java counterparts
     of the types of the actual arguments.
     If no such function type is found, we return @('nil').
     If instead some exist, we select the minimum one,
     which always exists because of the closure property
     enforced by @(tsee def-atj-other-function-type),
     and we return its corresponding output types.
     In other words, given the types of the actual arguments,
     the returned output types (if any) tell us
     the result type of the overloaded method
     that will be resolved at compile time.")
   (xdoc::p
    "A function type always has one or more output types
     (this is enforced by @(tsee def-atj-main-function-type)
     and @(tsee def-atj-other-function-type)),
     so it is appropriate to use @('nil') here to signal that
     no function types matching the criteria were found."))
  (atj-output-type-of-min-input-types-aux (atj-type-list-to-jitype-list in-types)
                                          fn-types
                                          nil
                                          nil)

  :prepwork
  ((define atj-output-type-of-min-input-types-aux
     ((in-jtypes atj-jitype-listp)
      (fn-types atj-function-type-listp)
      (current-min-in-jtypes atj-jitype-listp)
      (current-out-types? atj-type-listp))
     :returns (out-types? atj-type-listp :hyp :guard)
     (b* (((when (endp fn-types)) current-out-types?)
          (fn-type (car fn-types))
          (fn-in-types (atj-function-type->inputs fn-type))
          (fn-in-jtypes (atj-type-list-to-jitype-list fn-in-types))
          ((mv current-min-in-jtypes current-out-types?)
           (if (and (atj-maybe-jitype-list-<= in-jtypes fn-in-jtypes)
                    (or (null current-out-types?) ; i.e. none found yet
                        (atj-maybe-jitype-list-< fn-in-jtypes
                                                 current-min-in-jtypes)))
               (mv fn-in-jtypes (atj-function-type->outputs fn-type))
             (mv current-min-in-jtypes current-out-types?))))
       (atj-output-type-of-min-input-types-aux in-jtypes
                                               (cdr fn-types)
                                               current-min-in-jtypes
                                               current-out-types?)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-to-type-list ((type atj-typep))
  :returns (types atj-type-listp :hyp :guard)
  :short "Turn a single ATJ type into a singleton list of it."
  :long
  (xdoc::topstring-p
   "This is just @(tsee list),
    but we introduce an explicit function for greater clarity.")
  (list type)
  ///

  (more-returns
   (types consp :rule-classes :type-prescription)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-list-to-type-list-list ((types atj-type-listp))
  :returns (typess atj-type-list-listp :hyp :guard)
  :short "Lift @(tsee atj-type-to-type-list) to lists."
  (cond ((endp types) nil)
        (t (cons (atj-type-to-type-list (car types))
                 (atj-type-list-to-type-list-list (cdr types)))))
  ///

  (more-returns
   (typess cons-listp))

  (defret len-of-atj-type-list-to-type-list-list
    (equal (len typess)
           (len types))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-list-to-type ((types atj-type-listp))
  :guard (consp types)
  :returns (type atj-typep :hyp :guard)
  :short "Ensure that a non-empty list of types is a singleton,
          and return its only element."
  :long
  (xdoc::topstring
   (xdoc::p
    "In some cases, a non-empty list of types is expected to be a singleton.
     For instance, the type list may be the output types of a function
     that is known to return a single result.
     This utility can be used in these cases,
     to check the expectation for robustness,
     and to retrieve the single type from the singleton list."))
  (if (= (len types) 1)
      (car types)
    (prog2$
     (raise "Internal error: ~x0 is not a singleton list of types." types)
     :avalue))) ; irrelevant

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-type-list-to-type/acons ((types atj-type-listp))
  :guard (consp types)
  :returns (type atj-typep :hyp :guard)
  :short "Treat a non-empty list of ATJ types as a single type."
  :long
  (xdoc::topstring
   (xdoc::p
    "This is temporary code, useful while we are in the process of
     building more direct support for @(tsee mv) in ATJ.
     As we are generalizing things (e.g. type annotations)
     from single types to (non-empty) lists of types,
     it is sometimes necessary to treat lists of two or more types
     as the single @(':acons') type,
     which was the output type of @(tsee mv) functions
     before we started to build more direct support for @(tsee mv).
     If instead the list of types is a singleton,
     we return the unique element."))
  (if (= (len types) 1)
      (car types)
    :acons))
