; Implementation notes for Axe
;
; Copyright (C) 2021 Kestrel Institute
;
; License: A 3-clause BSD license. See the file books/3BSD-mod.txt.
;
; Author: Eric Smith (eric.smith@kestrel.edu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DAG algorithms:

By "dag" we mean a DAG represented as a list (see pseudo-dagp).

To convert a dag to a dag-array:
  make-into-array (TODO: Make a faster version specialized for dags)
  also make-dag-into-array and make-dag-into-array2

DAG Size (number of nodes in corresponding tree):
 of an entire dag: dag-size in dag-size.lisp (bottom-up, TODO: Make a version that doesn't go to an array)
 of an entire dag-array: see make-size-array-for-dag-array in dag-size.lisp (bottom-up)
 of one or more nodes in a dag-array: dag-size2.lisp (top-down, worklist)

Supporting vars (all vars on which a dag or node depends):
 of an entire dag: dag-vars in dags.lisp (bottom-up, takes a dag)
 of one or more nodes in a dag-array: supporting-vars.lisp (worklist, modernize?)

Supporting functions:
 of an entire dag: dag-fns in dags.lisp (bottom-up, takes a dag)

Dropping non-supporters:
 of a dag-array, returning a dag: drop-non-supporters-array in supporting-nodes.lisp (tags nodes top-down (non-worklist), rebuilds bottom-up)
 of two nodes in a dag-array, returning a dag: drop-non-supporters-array-two-nodes
 of a dag: drop-non-supporters in supporting-nodes.lisp (uses an array internally TODO: don't use an array)
 of a dag-array: crunch-dag-array-for-nodenums? crunch-dag-array2?

Computing supporters:
 of a node in a dag-array: supporters-of-node in supporting-nodes.lisp (top-down, no worklist)

Merging a dag into a dag-array: merge-nodes-into-dag-array in merge-nodes-into-dag-array.lisp (bottom-up (needs the dag to come in reversed) returns aux structures and renaming-array)
